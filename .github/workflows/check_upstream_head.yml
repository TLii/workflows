name: Monitor upstream for changes based on latest commit

on:
  workflow_call:
      outputs:
        upstream_head:
          description: "Current upstream head"
          value: ${{ jobs.monitor.outputs.upstream_head}}
        upstream_changed:
          value: ${{ jobs.monitor.outputs.upstream_changed }}
          description: "Whether a new build is needed"
      inputs:
        upstream_repo:
          required: true
          type: string
          description: "Upstream repository http address"
        upstream_branch:
          type: string
          description: "Upstream branch name to check"
          required: true
        last_upstream_head:
          type: string
          default: "0"
          description: "Currently recorded upstream head"
          required: false

jobs:
  monitor:
    name: Run upstream version monitor

    runs-on: ubuntu-latest

    env:
      UPSTREAM_REPOSITORY: ${{ inputs.upstream_repo }}
      UPSTREAM_BRANCH: ${{ inputs.upstream_branch }}
      LAST_UPSTREAM: ${{ inputs.last_upstream_head }}
    outputs:
      upstream_head: ${{ steps.upstream_head.outputs.upstream_head }}
      upstream_changed: ${{ steps.compare_head.outputs.upstream_changed }}

    steps:

    - name: Code checkout
      uses: actions/checkout@v3

    - name: Get upstream head
      id: upstream_head
      run: |
        # Get current upstream head
        current_upstream_head="$(git ls-remote $UPSTREAM_REPOSITORY/refs/heads/$UPSTREAM_BRANCH | head -n1 |awk '{print $1;}')"

        # Output version data
        echo "upstream_head=$current_upstream_head" >> $GITHUB_OUTPUT
        echo "Current upstream head is: $current_upstream_head"

    - name: Compare upstream version to currently recorded versioning
      id: compare_head
      run: |

        current_upstream_head=${{ steps.upstream_head.outputs.upstream_head }}

        if [[ -f $PWD/${{ env.last_upstream }} ]]; then
          last_upstream=$(cat $PWD/${{ inputs.recorded_upstream_head }})
        else
          last_upstream=${{ env.last_upstream }}
        fi

        if [[ -z $last_upstream ]]; then
          # If no recorded version was given, assume a change
          echo "No recorded value for upstream head. Assuming upstream has changed."
          echo "upstream_changed=true" >> $GITHUB_OUTPUT

        elif [[ $current_upstream_head != $last_upstream ]]; then
          # If current upstream head differs from recorded one, output true.

          echo "Last recorded and current upstream heads differ"
          echo "Last recorded upstream head was $last_upstream"
          echo "Current upstream head is $current_upstream_head"
          echo "upstream_changed=true" >> $GITHUB_OUTPUT

        else
          # If head hasn't changed, output false.

          echo "No change detected in upstream."
          echo "Last recorded upstream head was $last_upstream"
          echo "Current upstream head is $current_upstream_head"
          echo "upstream_changed=false" >> $GITHUB_OUTPUT

        fi